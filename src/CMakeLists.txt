INCLUDE(CheckIncludeFile)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckLibraryExists)

INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/dnm")


ADD_EXECUTABLE(dng-call
  dng-call.cc
  lib/call.cc lib/likelihood.cc lib/newick.cc lib/pedigree.cc lib/peeling.cc
  lib/mutation.cc lib/stats.cc
)

# Some compilers have incomplete c++11 support provide a list of
# common features to toss an error if someone tries to use
# and early compiler
TARGET_COMPILE_FEATURES(dng-call PRIVATE
  cxx_auto_type
  cxx_constexpr
  cxx_decltype
  cxx_deleted_functions
  cxx_lambdas
  cxx_nonstatic_member_init
  cxx_nullptr
  cxx_range_for
  cxx_rvalue_references
  cxx_strong_enums
  cxx_trailing_return_types
  cxx_attributes
  cxx_reference_qualified_functions
  cxx_decltype_incomplete_return_types
)

ADD_EXECUTABLE(dng-dnm
  dng-dnm.cc
  dnm/snpLike.cc dnm/indelLike.cc dnm/pairLike.cc dnm/makeLookup.cc
  dnm/pedParser.cc dnm/bcf2Qcall.cc dnm/bcf2Paired.cc
)

ADD_EXECUTABLE(dng-phaser
  dng-phaser.cc
)

CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/dng.sh.in"
  "${CMAKE_CURRENT_BINARY_DIR}/dng.sh"
  @ONLY)

CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/version.h.in"
  "${CMAKE_CURRENT_BINARY_DIR}/version.h"
  @ONLY)

find_package(PythonInterp 2.7 REQUIRED)
find_package(PythonLibs 2.7 REQUIRED)
  
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/treecall2.py.in"
  "${CMAKE_CURRENT_BINARY_DIR}/treecall2.py" @ONLY)
  
configure_file("${CMAKE_CURRENT_SOURCE_DIR}/treecall/setup.py.in"
  "${CMAKE_CURRENT_BINARY_DIR}/treecall/setup.py" @ONLY)

configure_file("${CMAKE_CURRENT_SOURCE_DIR}/py-editdist/setup.py.in"
  "${CMAKE_CURRENT_BINARY_DIR}/py-editdist/setup.py" @ONLY)

add_custom_target(treecall ALL ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/treecall/setup.py build) 

add_custom_target(py-ed ALL ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/py-editdist/setup.py build)

IF(USE_STATIC_LIBSTDCXX)
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++")
ENDIF()

IF(USE_STATIC_FLAG)
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static")
  SET_TARGET_PROPERTIES(dng-dnm    PROPERTIES LINK_SEARCH_START_STATIC On)
  SET_TARGET_PROPERTIES(dng-phaser PROPERTIES LINK_SEARCH_START_STATIC On)
  SET_TARGET_PROPERTIES(dng-call   PROPERTIES LINK_SEARCH_START_STATIC On)

  SET_TARGET_PROPERTIES(dng-dnm    PROPERTIES LINK_SEARCH_END_STATIC On)
  SET_TARGET_PROPERTIES(dng-phaser PROPERTIES LINK_SEARCH_END_STATIC On)
  SET_TARGET_PROPERTIES(dng-call   PROPERTIES LINK_SEARCH_END_STATIC On)
ENDIF(USE_STATIC_FLAG)

TARGET_LINK_LIBRARIES(dng-dnm Boost::PROGRAM_OPTIONS Boost::FILESYSTEM Boost::SYSTEM)
TARGET_LINK_LIBRARIES(dng-dnm HTSLIB::HTSLIB Threads::Threads)
TARGET_LINK_LIBRARIES(dng-dnm EIGEN3::EIGEN3)

TARGET_LINK_LIBRARIES(dng-phaser Boost::PROGRAM_OPTIONS Boost::FILESYSTEM Boost::SYSTEM)
TARGET_LINK_LIBRARIES(dng-phaser HTSLIB::HTSLIB Threads::Threads)

TARGET_LINK_LIBRARIES(dng-call HTSLIB::HTSLIB Threads::Threads)
TARGET_LINK_LIBRARIES(dng-call EIGEN3::EIGEN3)
TARGET_LINK_LIBRARIES(dng-call Boost::PROGRAM_OPTIONS Boost::FILESYSTEM Boost::SYSTEM)

IF(DEVEL_MODE)
  TARGET_LINK_LIBRARIES(dng-call Boost::TIMER)
ENDIF()

IF(TARGET ext_eigen3)
  ADD_DEPENDENCIES(dng-call ext_eigen3)
  ADD_DEPENDENCIES(dng-dnm ext_eigen3)
ENDIF()

################################################################################
# Install

INSTALL(TARGETS dng-dnm RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
INSTALL(TARGETS dng-phaser RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
INSTALL(TARGETS dng-call RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} ${PROJ_INSTALL_EXTRA_ARGS})
INSTALL(PROGRAMS "${CMAKE_CURRENT_BINARY_DIR}/dng.sh"
  DESTINATION ${CMAKE_INSTALL_BINDIR} RENAME dng)
INSTALL(PROGRAMS "${CMAKE_CURRENT_BINARY_DIR}/treecall2.py"
  DESTINATION ${CMAKE_INSTALL_LIBEXECDIR} RENAME dng-treecall)
install(CODE "execute_process(COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/treecall/setup.py install --install-purelib \${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBEXECDIR})")
install(CODE "execute_process(COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/py-editdist/setup.py install --install-lib \${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBEXECDIR})")


#####################################################
####### STEVEN CUSTOM CMAKE
ADD_EXECUTABLE(dng-call_test
        dng-call_test.cc
        vt/calculateProbs.cc
        lib/likelihood.cc lib/newick.cc lib/pedigree.cc lib/peeling.cc
        lib/mutation.cc lib/stats.cc
        vt/peeling_test.cpp vt/find_mutation_getter.cpp vt/find_mutation_getter.h)

TARGET_LINK_LIBRARIES(dng-call_test HTSLIB::HTSLIB Threads::Threads)
TARGET_LINK_LIBRARIES(dng-call_test EIGEN3::EIGEN3)
TARGET_LINK_LIBRARIES(dng-call_test Boost::PROGRAM_OPTIONS Boost::FILESYSTEM Boost::SYSTEM)


ADD_EXECUTABLE(dng_vt
        vt/find_mutation_test.cpp
        lib/likelihood.cc lib/newick.cc lib/pedigree.cc lib/peeling.cc
        lib/mutation.cc lib/stats.cc
        vt/vcf_helper.h vt/find_mutation.h)

TARGET_LINK_LIBRARIES(dng_vt HTSLIB::HTSLIB Threads::Threads)
TARGET_LINK_LIBRARIES(dng_vt EIGEN3::EIGEN3)
TARGET_LINK_LIBRARIES(dng_vt Boost::PROGRAM_OPTIONS Boost::FILESYSTEM Boost::SYSTEM Boost::UNIT_TEST_FRAMEWORK)

#
## Make a test for each unit test file located in test/ dir
#enable_testing()
##file(GLOB_RECURSE TESTS test_*[cc|cpp])
##foreach(test ${TESTS})
#SET(testSrc "vt/find_mutation_test.cpp")
#  get_filename_component(testName ${testSrc} NAME_WE)
#  add_executable(${testName} ${testSrc}
#          lib/likelihood.cc lib/newick.cc lib/pedigree.cc lib/peeling.cc
#          lib/mutation.cc lib/stats.cc
#          vt/vcf_helper.h vt/find_mutation.h)
#  target_link_libraries(${testName}
#          Threads::Threads
#          Boost::PROGRAM_OPTIONS
#          Boost::FILESYSTEM
#          Boost::SYSTEM
#          Boost::UNIT_TEST_FRAMEWORK
#          EIGEN3::EIGEN3
#          HTSLIB::HTSLIB
#          )
#  add_test(${testName}_build "${CMAKE_COMMAND}" --build ${CMAKE_BINARY_DIR} --target ${testName})
#  add_test(${testName}_run ${testName})
#  set_tests_properties(${testName}_run PROPERTIES DEPENDS ${testName}_build)
#
##  set_target_properties(${testName} PROPERTIES
##            RUNTIME_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_SOURCE_DIR}/testBin)
##  add_test(NAME ${testName}A
##           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/testBin
##           COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/testBin/${testName} )
##endforeach(test)